#!/bin/sh

#pwd

test -d ./config || mkdir -p ./config


if test -f ./config/config.class;then CLASS_O=$(cat ./config/config.class);else CLASS_O="";fi
if test -f ./config/config.dist;then DIST_O=$(cat ./config/config.dist);else DIST_O="";fi
if test -f ./config/config.osname;then OSNAME_O=$(cat ./config/config.osname);else OSNAME_O="";fi
if test -f ./config/config.source;then SOURCE_O=$(cat ./config/config.source);else SOURCE_O="";fi
if test -f ./config/config.datadir;then DATA_O=$(cat ./config/config.datadir);else DATA_O="";fi
					  

INTER_O="1"
FORCE_O="1"
YES_O="1"
QEMU_O="1"

CONFIG_O="1"

pint_params(){
    echo "      source: $SOURCE_O"
    echo "     datadir: $DATA_O"
    echo "      osname: $OSNAME_O"
    echo "       class: $CLASS_O"
}

#echo $@

while [ $# -gt 0 ]; do
    case $1 in
	-h|--help)
	    shift
	    echo "Usage: $(basename $0) [config_opts]      (configure)"
	    echo "       $(basename $0) IMAGE.img          (interactive)"
	    echo "       $(basename $0) [runtime_opts]     (batch)"
	    echo
	    echo "Patch a PuavoOS image and (eventualy) compress a new image." 
	    echo
	    echo "Config options:"
	    echo "    -s, --source SOURCE        set source to SOURCE"
	    echo "    -d, --datadir DATADIR      set datadir to DATADIR"
 	    echo "    -o, --osname OSNAME        set image osname to OSNAME"
	    echo "    -c, --class CLASS          set image class to CLASS"
 	    echo "    -h, --help                 show this help"
            echo
	    print_params
            echo
	    echo "Runtime options:"
 	    echo "    -i, --interactice          force interactive shell"
 	    echo "    -f, --force                force building image even with errors"
 	    echo "    -y, --yes                  do not ask at start"
 	    echo "    -q, --qemu                 do also make a qemu image"
	    echo
	    exit 0
	    ;;

	#config 
	-s|--source)
	    shift
	    SOURCE_O=$1
	    CONFIG_O=0
	    echo $1 > ./config/config.source
	    shift
	    ;;
	-c|--class)
	    shift
	    CLASS_O=$1
	    CONFIG_O=0
	    echo $1 > ./config/config.class
	    shift
	    ;;
	-o|--osname)
	    shift
	    OSNAME_O=$1
	    CONFIG_O=0
	    echo $1 > ./config/config.osname
	    shift
	    ;;
	-d|--datadir)
	    shift
	    DATA_O=$1
	    CONFIG_O=0
	    echo $1 > ./config/config.datadir
	    shift
	    ;;

	#runtime
	-i|--interactive)
	    shift
	    INTER_O="0"
	    ;;
	-y|--yes)
	    shift
	    YES_O="0"
	    ;;
	-f|--force)
	    shift
	    FORCE_O="0"
	    ;;
	-q|--qemu)
	    shift
	    QEMU_O="0"
	    ;;
	--)
	    shift
	    break
	    ;;
	-*)
	    echo "error: invalid argument '$1'"
	    exit 1
	    ;;
	*)
	    break
	    ;;
    esac
done

if test $CONFIG_O = 0;then
    echo "info: new config set. exiting ..."
    exit 0
fi

if ! test $(id --user) = 0;then
    exec sudo $0 $@
fi

if [ $# -eq 1 ]; then
    SOURCE_O=$1
    INTER_O=0
fi



#check source image
if test -z "$SOURCE_O";then
    echo "error: source param not set"
    exit 1
fi
if test -h $SOURCE_O;then
    ANS="$(readlink -e $SOURCE_O)"
    if ! test -n "$ANS";then
	echo "error: source link not ok"
	exit 1
    fi
else
    if ! test -e $SOURCE_O;then
	echo "error: source file not found"
	exit 1
    fi	
fi

#check datadir
if test -n "$DATA_O";then
    if ! test -d $DATA_O;then
        echo "error: datadir not found"
        exit 1
    fi
else
    echo "error: datadir not set"
    exit 1
fi

if test $INTER_O = 1 -a $YES_O = 1;then
    echo "do you want to build with the following params:"
    echo
    print_params
    echo
    echo -n "type [Y|n]: "
    read ANS
    if ! test "$ANS" = "" -o "$ANS" = "y" -o "$ANS" = "Y" -o "$ANS" = "j" -o "$ANS" = "J";then 
        exit 0
    fi
fi

#mount image
SOURCE=$SOURCE_O
DATAPATH=$DATA_O

sudo puavo-img-mount $SOURCE


CHROOT=$(basename -s .img $SOURCE)

if test -e $CHROOT/etc/puavo-image/name;then
    NAME=$(cat $CHROOT/etc/puavo-image/name)
else
    echo "error: $CHROOT does not seem to be a puavo-os image"
    sudo puavo-img-mount --umount $SOURCE
    exit 1
fi

#calc parameters
OSNAME_I=$(echo $NAME|cut -d- -f1)
CLASS_I=$(echo $NAME|cut -d- -f3)
DIST=$(echo $NAME|cut -d- -f4)

if test -n "$OSNAME_O";then
    OSNAME=$OSNAME_O
else
    OSNAME=$OSNAME_I
fi

if test -n "$CLASS_O";then
    CLASS=$CLASS_O
else
    CLASS=$CLASS_I
fi

#patch $CHROOT/etc/puavo-conf/image.json

if test -d /install/pre.d;then
    if test -n "$(ls /install/pre.d|grep .sh)";then
        echo "**************************************************************"
        echo "                      pre-chroot                             *"
        echo "**************************************************************"
        for B in $(ls /install/pre.d);do
	    if test -x /install/pre.d/$B;then
                echo "pre-chroot: $B $CHROOT $(pwd)"
		/install/pre.d/$B $CHROOT $(pwd)
		#if test $? = 1;then ERROR=1;fi
	    fi 
        done
    fi
fi


#copy data to image

#copy chroot binary to chroot
cat << 'EOF'  > $CHROOT/usr/local/bin/puavo-chroot-apply
#!/bin/sh


echo "**************************************************************"
echo "*                                                            *"
echo "*                     Hello Chroot                           *"
echo "*                                                            *"
echo "**************************************************************"
UPDATED=1
ERROR=0

#bin
if test -d /install/bin.d;then
    if test -n "$(ls /install/bin.d|grep .sh)";then
        echo "**************************************************************"
        echo "                          bin                                *"
        echo "**************************************************************"
        for B in $(ls /install/bin.d);do
	    if test -x /install/bin.d/$B;then
                echo $B
		/install/bin.d/$B
		if test $? = 1;then ERROR=1;fi
	    fi 
        done
    fi
fi

#files
if test -d /install/files.d;then
    if test -n "$(ls /install/files.d/)";then
	echo "**************************************************************"
        echo "                         files                               *"
        echo "**************************************************************"
        cp -r /install/files.d/* /
	if test $? = 1;then ERROR=1;fi
        echo "done"
    fi
fi


#lists
if test -d /install/lists.d;then
    if test -n "$(ls /install/lists.d|grep .list)";then
        echo "**************************************************************"
        echo "                         lists                               *"
        echo "**************************************************************"
        apt-get update
	if test $? = 1;then ERROR=1;fi
	UPDATED=0
        apt-get -y install $(cat /install/lists.d/*list|xargs)
	if test $? = 1;then ERROR=1;fi
    fi
    echo "done"
fi

#debs
if test -d /install/debs.d;then
    if test -n "$(ls /install/debs.d|grep .deb)";then
        echo "**************************************************************"
        echo "                         debs                                *"
        echo "**************************************************************"
        for D in $(ls /install/debs.d/*.deb);do
             echo $D
             dpkg -i $D
             #if test $? = 1;then ERROR=1;fi
        done
        if test $UPDATED = 1;then
	    apt-get update
    	    if test $? = 1;then ERROR=1;fi
	    UPDATED=0
	fi
	apt-get -y -f install
	if test $? = 1;then ERROR=1;fi
    fi
fi

#parts
if test -d /install/parts.d;then
    if test -n "$(ls /install/parts.d/)";then
        echo "**************************************************************"
        echo "                         parts                               *"
        echo "**************************************************************"
	if test $UPDATED = 1;then
	    apt-get update
	fi
        for P in $(ls /install/parts.d/);do
            if test -x /install/parts.d/$P/install.sh;then
                 echo $P
                 /install/parts.d/$P/install.sh
  	         if test $? = 1;then ERROR=1;fi
            fi
        done
	apt-get -f install
	if test $? = 1;then ERROR=1;fi
    fi
fi

echo "**************************************************************"
echo "*                                                            *"
echo "*                     Goodbye Chroot                         *"
echo "*                                                            *"
echo "**************************************************************"
echo "Status is $ERROR"
exit $ERROR
EOF

chmod +x $CHROOT/usr/local/bin/puavo-chroot-apply

#copy cached apt
if ! test -d cache/apt/;then
    mkdir -p cache/apt/
    touch    cache/apt/.t
fi
#copy var
cp -r cache/apt/* $CHROOT/var/cache/apt/archives/.

#copy install
if ! test -d $CHROOT/install/;then
    mkdir -p $CHROOT/install/
fi
#echo "copy data to chroot"
cp -r  $DATAPATH/* $CHROOT/install/

#for logfiles
test -d ./log || mkdir ./log

#patch!
if test $INTER_O = 1;then
    echo "info: non interactive"
    echo "/usr/local/bin/puavo-chroot-apply" | puavo-dir-chroot $CHROOT > ./log/last-build.log 
else
    echo "info: interactive"
    puavo-dir-chroot $CHROOT
fi
RET=$?


if test $RET = 0 -o $FORCE_O = 0;then
     echo
     echo "***************************************************************"
     echo "*                 ok, building image                           *"
     echo "***************************************************************"
#    cache debs
     rsync -rav  --delete --size-only  $CHROOT/var/cache/apt/archives/ cache/apt/

#    clean image
     rm -r $CHROOT/install
     rm -r $CHROOT/var/cache/apt/archives/*

#    compose new image name
     VERSION=$(date +%Y-%m-%d-%H%M%S)
     IMAGE="${OSNAME}-os-${CLASS}-${DIST}-${VERSION}-amd64"
     #save names in image
     echo "${IMAGE}.img" > $CHROOT/etc/puavo-image/name
     echo "$( cat $CHROOT/etc/puavo-image/release ) (${VERSION})">$CHROOT/etc/puavo-image/release
     echo "$CLASS" > $CHROOT/etc/puavo-image/class

     echo $IMAGE.img
     
#    make compressed image
     puavo-dir-clone --dont-update-name --type squashfs $CHROOT ${IMAGE}.img

     #    puavo-dir-image --class $CLASS --dist $DIST image.img
     if test $QEMU_O = 1;then
          puavo-img-installer $IMAGE.img
     fi

else
    echo
    echo "***************************************************************"
    echo "*   error: an error occured in chrooot. not bulding image     *"
    echo "***************************************************************"
fi

#save logfile
if test -f ./log/last-build.log;then
    mv ./log/last-build.log ./log/$IMAGE.log
fi


#umount
puavo-img-mount --umount $SOURCE


chown --reference .. $IMAGE.img
chown -R --reference .. cache
chown -R --reference .. config


exit $?

	
