#!/bin/sh


if ! test $(id --user) = 0;then
    exec sudo $0 $@
fi



test -d ./cache/apt || mkdir -p ./cache/apt
test -d ./cache/parts.d || mkdir ./cache/parts.d

test -d ./config || mkdir -p ./config
test -d ./log || mkdir ./log

if test -f ./config/tool.class;then CLASS_O=$(cat ./config/tool.class);else CLASS_O="";fi
if test -f ./config/tool.dist;then DIST_O=$(cat ./config/tool.dist);else DIST_O="";fi
if test -f ./config/tool.osname;then OSNAME_O=$(cat ./config/tool.osname);else OSNAME_O="";fi
if test -f ./config/tool.source;then SOURCE_O=$(cat ./config/tool.source);else SOURCE_O="";fi
if test -f ./config/tool.datadir;then DATA_O=$(cat ./config/tool.datadir);else DATA_O="";fi
					 
INTER_O="1"
FORCE_O="1"
YES_O="1"
QEMU_O="1"
NOIMAGE_O="1"
PREBUILD_O="1"

CONFIG_O="1"

# not nice!
DIST_O="buster"

print_params(){
    echo "      source: $SOURCE_O"
    echo "     datadir: $DATA_O"
    echo "      osname: $OSNAME_O"
    echo "       class: $CLASS_O"
}

on_exit(){
    puavo-img-mount --umount $SOURCE

    test -f $IMAGE.img && chown --reference ..  $IMAGE.img
    test -f $IMAGE-inst.img && chown --reference ..  $IMAGE-inst.img
    
    test -d chache   &&  chown --recursive --reference ..  cache
    test -d config   &&  chown --recursive --reference ..  config
    test -d log      &&  chown --recursive --reference ..  log
    test -d prebuild &&  chown --recursive --reference ..  prebuild
}


while [ $# -gt 0 ]; do
    case $1 in
	-h|--help)
	    shift
	    echo "Usage: $(basename $0) [config_opts]      (configure)"
	    echo "       $(basename $0) IMAGE.img          (interactive)"
	    echo "       $(basename $0) [runtime_opts]     (batch)"
	    echo
	    echo "Patch a PuavoOS image and (eventualy) compress a new image." 
	    echo
	    echo "Config options:"
	    echo "    -s, --source SOURCE        set source to SOURCE"
	    echo "    -d, --datadir DATADIR      set datadir to DATADIR"
 	    echo "    -o, --osname OSNAME        set image osname to OSNAME"
	    echo "    -c, --class CLASS          set image class to CLASS"
 	    echo "    -h, --help                 show this help"
            echo
            echo " Stored params are:"
	    print_params
            echo
	    echo "Runtime options:"
 	    echo "    -i, --interactice          force interactive shell"
 	    echo "    -f, --force                force building image even with errors"
	    echo "    -n, --noimage              do not build image even without errors"
 	    echo "    -y, --yes                  do not ask at start"
 	    echo "    -q, --qemu                 do also make a qemu image"
 	    echo "    -p, --prebuild             make a prebuild image"
	    echo
	    exit 0
	    ;;

	#config 
	-s|--source)
	    shift
	    SOURCE_O=$1
	    CONFIG_O=0
	    echo $1 > ./config/tool.source
	    shift
	    ;;
	-c|--class)
	    shift
	    CLASS_O=$1
	    CONFIG_O=0
	    echo $1 > ./config/tool.class
	    shift
	    ;;
	-o|--osname)
	    shift
	    OSNAME_O=$1
	    CONFIG_O=0
	    echo $1 > ./config/tool.osname
	    shift
	    ;;
	-d|--datadir)
	    shift
	    DATA_O=$1
	    CONFIG_O=0
	    echo $1 > ./config/tool.datadir
	    shift
	    ;;

	#runtime
	-i|--interactive)
	    shift
	    INTER_O="0"
	    ;;
	-y|--yes)
	    shift
	    YES_O="0"
#	    echo "option --yes $YES_O"
	    ;;
	-f|--force)
	    shift
	    FORCE_O="0"
	    ;;
	-q|--qemu)
	    shift
	    QEMU_O="0"
	    ;;
	-n|--noimage)
	    shift
	    NOIMAGE_O="0"
	    ;;
	-p|--prebuild)
	    shift
	    PREBUILD_O="0"
	    ;;
	--)
	    shift
	    break
	    ;;
	-*)
	    echo "error: invalid argument '$1'"
	    exit 1
	    ;;
	*)
	    break
	    ;;
    esac
done

if test $CONFIG_O = 0;then
    echo "Stored params are now:"
    print_params
    exit 0
fi

if [ $# -eq 1 ]; then
    SOURCE_O=$1
    INTER_O=0
fi

#check datadir
if test -n "$DATA_O";then
    if ! test -d $DATA_O;then
        echo "error: datadir not found"
        exit 1
    fi
else
    echo "error: datadir not set"
    exit 1
fi



#check source image
if test -z "$SOURCE_O";then
    echo "error: source param not set"
    exit 1
fi
if test -h $SOURCE_O;then
    ANS="$(readlink -e $SOURCE_O)"
    if ! test -n "$ANS";then
	echo "error: source link not ok"
	exit 1
    fi
else
    if ! test -e $SOURCE_O;then
	echo "error: source file not found"
	exit 1
    fi	
fi

# get name from image

#test -d $MOUNT || mkdir -p $MOUNT

mount -o loop $SOURCE_O /mnt ;echo $?

if test -e /mnt/etc/puavo-image/name;then
    NAME=$(cat /mnt/etc/puavo-image/name)
else
    echo "error: $CHROOT does not seem to be a puavo-os image"
    umount /mnt
    exit 1
fi
id
#echo $MOUNT
umount /mnt


#calc parameters
OSNAME_I=$(echo $NAME|cut -d- -f1)
CLASS_I=$(echo $NAME|cut -d- -f3)
DIST=$(echo $NAME|cut -d- -f4)

if test -n "$OSNAME_O";then
    OSNAME=$OSNAME_O
else
    OSNAME=$OSNAME_I
fi

if test -n "$CLASS_O";then
    CLASS=$CLASS_O
else
    CLASS=$CLASS_I
fi

##################################################################3

#echo "debug: INTER_O = $INTER_O YES_O = $YES_O" 
# ask at start
if test $INTER_O = 1 -a $YES_O = 1;then
    echo "do you want to build with the following params:"
    echo
    print_params
    echo
    echo -n "type [Y|n]: "
    read ANS
    if ! test "$ANS" = "" -o "$ANS" = "y" -o "$ANS" = "Y" -o "$ANS" = "j" -o "$ANS" = "J";then 
        exit 0
    fi
else
    echo "building image with:"
    print_params
    echo
fi


###################################################################################
#                     special for pre building                                    #
###################################################################################

# prepare for prebuild
PREBUILD_IMAGE="${OSNAME_O}-os-${CLASS_O}-${DIST_O}-amd64"


# exit if all is done yet
if test $PREBUILD_O = 0;then
    echo -n "info: calculating fingerprint for prebuild..."
    PREBUILD_MD5SUM=$(tar -cf - $DATA_O/* | md5sum | cut -d\  -f1)
    if test -f ./prebuild/$PREBUILD_IMAGE.img;then
	if test -f ./prebuild/$PREBUILD_IMAGE.md5sum;then
	    P_MD5SUM=$(cat ./prebuild/$PREBUILD_IMAGE.md5sum)
	else
	    P_MD5SUM="sdfsadfköökljsdkflsadjklfasjdlfjsadlkf"
	fi
        echo "ok"
        if test $P_MD5SUM = $PREBUILD_MD5SUM;then
	    echo "info: image is up to date. exiting ..."
            exit 0
        fi
    fi
fi

##################################################################################
###################################################################################
#                     ready now. mount the source image                           #
###################################################################################
###################################################################################
echo "SOURCE_O $SOURCE_O DATA_O $DATA_O |"

SOURCE=$SOURCE_O
DATAPATH=$DATA_O
CHROOT=$(basename -s .img $SOURCE)

trap on_exit EXIT
trap on_exit INT

echo "SOURCE $SOURCE |"

sudo generic-img-mount $SOURCE

echo $?

###################################################################################
#          the image is mounted now. we copy all needed data to chroot            #
###################################################################################




#call pre-chroot-hooks
if test -d $DATAPATH/pre.d;then
    if test -n "$(ls $DATAPATH/pre.d|grep .sh)";then
        echo "**************************************************************"
        echo "*                     pre-chroot                             *"
        echo "**************************************************************"
        for B in $(ls $DATAPATH/pre.d);do
	    if test -x $DATAPATH/pre.d/$B;then
                echo "$B"
		$DATAPATH/pre.d/$B $CHROOT $(pwd)
		#if test $? = 1;then ERROR=1;fi
	    fi 
        done
    fi
fi

echo "CHROOT $CHROOT DATAPATH $DATAPATH |"
echo "***************************************************************"
echo "*                    copy to chroot                           *"
echo "***************************************************************"
generic-dir-copy $CHROOT $DATAPATH ./cache
generic-dir-patch $CHROOT  > ./log/last-build.log 
RET=$?
generic-dir-back


###################################################################################
###################################################################################
#                                we start making the image                        #
###################################################################################
###################################################################################

IMAGE=""

echo "debug $NOIMAGE_O $RET $FORCE_O" 

if test $NOIMAGE_O = 1; then 
  if test $RET = 0 -o $FORCE_O = 0;then
	
     echo
     echo "***************************************************************"
     echo "*                 ok, building image                           *"
     echo "***************************************************************"

#    clean chroot
     rm -r $CHROOT/install
     rm -r $CHROOT/var/cache/apt/archives/*

#    $CHROOT $IMAGE

     #    compose new image name
     VERSION=$(date +%Y-%m-%d-%H%M%S)
     IMAGE="${OSNAME}-os-${CLASS}-${DIST}-${VERSION}-amd64"

     
#    save source image names
     if ! test $CHROOT/etc/puavo-image/base_name;then
	 cp $CHROOT/etc/puavo-image/name $CHROOT/etc/puavo-image/base_name
     fi
     if ! test $CHROOT/etc/puavo-image/base_release;then
	 cp $CHROOT/etc/puavo-image/release $CHROOT/etc/puavo-image/base_release
     fi
     if ! test $CHROOT/etc/puavo-image/base_class;then
	 cp $CHROOT/etc/puavo-image/class $CHROOT/etc/puavo-image/base_class
     fi
     
#    store names in image
     echo "${IMAGE}.img" > $CHROOT/etc/puavo-image/name
     echo "$( cat $CHROOT/etc/puavo-image/release ) (${VERSION})" > $CHROOT/etc/puavo-image/release
     echo "$CLASS" > $CHROOT/etc/puavo-image/class

     echo $IMAGE.img
     
#    make compressed image
     puavo-dir-clone --dont-update-name --type squashfs $CHROOT ${IMAGE}.img

          
#    maybe make qemu image too
     if test $QEMU_O = 0;then
	  echo "building qemu image"
          puavo-img-installer $IMAGE.img  > ./log/last-build.log
     fi

  else
    echo
    echo "**************************************************************"
    echo "*   error: an error occured in chrooot. not bulding image    *"
    echo "**************************************************************"
    RET=1
  fi
else
    echo
    echo "**************************************************************"
    echo "*      info: switch --noimage set. not bulding image         *"
    echo "**************************************************************"
    RET=1
fi    
###################################################################################
#          image is (maybe) build. clean up                                        #
###################################################################################

if test -n "$IMAGE";then
    if test $PREBUILD_O = 0;then
	 test -d ./prebuild || mkdir -p ./prebuild
	 mv $IMAGE.img ./prebuild/$PREBUILD_IMAGE.img
	 echo $PREBUILD_MD5SUM > ./prebuild/$PREBUILD_IMAGE.md5sum
	 test -f ./log/last-build.log && mv ./log/last-build.log ./log/$PREBUILD_IMAGE.log 
    else
         test -f ./log/last-build.log && mv ./log/last-build.log ./log/$IMAGE.log
    fi
fi


on_exit

exit $RET

	
